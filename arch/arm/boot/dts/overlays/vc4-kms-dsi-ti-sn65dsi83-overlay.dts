/*
 * vc4-kms-dsi-sn65dsi8x-overlay.dts
 */

/dts-v1/;
/plugin/;
#include <dt-bindings/gpio/gpio.h>

/ {
	compatible = "brcm,bcm2835";

	/* PWM0 function */
	fragment@0 {
		target = <&gpio>;
		__overlay__ {
			pwm_pins: pwm_pins {
				brcm,pins = <12>;
				brcm,function = <4>; /* Alt1 */
			};
		};
	};

	fragment@1 {
		target = <&pwm>;
		frag1: __overlay__ {
			pinctrl-names = "default";
			pinctrl-0 = <&pwm_pins>;
			assigned-clock-rates = <100000000>;
			status = "okay";
		};
	};

	fragment@2 {
		target-path = "/";
		__overlay__ {
			//#gpio-cells = <2>;
			/* Panel backlight through PWM0 on GPIO 12 */
			backlight_a_lvds: backlight_a {
				compatible = "pwm-backlight";
				pwms = <&pwm 0 5000000>; /* Period of 5000000ns means 200Hz */
				brightness-levels = <0  1000>;
				num-interpolated-steps = <1000>;
				default-brightness-level = <800>;
				enable-gpios = <&gpio 17 0>; /* Backlight enable... */
			};

			panel_a: panel_a {
				compatible = "ampire,am-1280800n4tzqw-t85h-a", "panel-lvds";
				backlight = <&backlight_a_lvds>;

				/* Physical dimensions of active area */
				width-mm = <217>;
				height-mm = <136>;

				/* Data sheet shows VESA mapping (MSB in channel 3) */
				data-mapping = "vesa-24";

				panel-timing {
					clock-frequency = <71403480>;
					hactive = <1280>;
					vactive = <800>;
					hsync-len = <166>;
					/* If "0" does not work, set to something non-zero and reduce hsync-len accordingly */
					hfront-porch = <0>;
					hback-porch = <0>;
					/* If "0" does not work, set to something non-zero and reduce vsync-len accordingly */
					vfront-porch = <0>;
					vback-porch = <0>;
					vsync-len = <23>;
 				};

				port {
					panel_a_in_lvds: endpoint {
						remote-endpoint = <&bridge_out_a>;
					};
				};
			};
		};
	};

	fragment@3 {
		target = <&i2c1>;
		__overlay__ {
			#gpio-cells = <2>;
			#address-cells = <1>;
			#size-cells = <0>;
			status = "okay";

			bridge@2d {
				compatible = "ti,sn65dsi83";
				reg = <0x2d>;
				enable-gpios = <&gpio 4 GPIO_OPEN_DRAIN>;

				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;
						bridge_a_in: endpoint {
							remote-endpoint = <&dsi1_out_port>;
							data-lanes = <0 1 2>;
						};
					};

					port@2 {
						reg = <2>;
						bridge_out_a: endpoint {
							remote-endpoint = <&panel_a_in_lvds>;
						};
					};
				};
			};
		};
	};

	fragment@4 {
		target = <&dsi1>;
		__overlay__ {
			#address-cells = <1>;
			#size-cells = <0>;
			status = "okay";
			port {
				dsi1_out_port: endpoint {
					remote-endpoint = <&bridge_a_in>;
					data-lanes = <0 1 2>;
				};
			};
		};
	};
};
